<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:nm="urn:basica.db.mapper:1.0"
  targetNamespace="urn:basica.db.mapper:1.0"
  elementFormDefault="qualified"
>

  <!-- Define root (mapper) -->
  <xs:element name="mapper">
    <xs:annotation>
      <xs:documentation source="version">1.0</xs:documentation>
      <xs:documentation source="description">Root element of the nybatis sql mapper file.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="nm:sql" minOccurs="1" maxOccurs="unbounded" />
      </xs:sequence>
    </xs:complexType>
    <xs:unique name="uniqueSqlId" >
      <xs:selector xpath="nm:sql" />
      <xs:field xpath="@id" />
    </xs:unique>
  </xs:element>


  <!-- Define sql -->
  <xs:element name="sql">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="nm:key"      />
        <xs:group   ref="nm:ifElse"   />
        <xs:element ref="nm:case"     />
        <xs:element ref="nm:foreach"  />
        <xs:element ref="nm:group"    />
        <xs:element ref="nm:ref"      />
      </xs:choice>
      <xs:attribute name="id"          type="nm:notEmpty" use="required"/>
      <xs:attribute name="fetch"       type="xs:positiveInteger" />
      <xs:attribute name="lobPrefetch" type="xs:positiveInteger" />
    </xs:complexType>
  </xs:element>


  <!-- Define group -->
  <xs:group name="ifElse">
    <xs:sequence>
      <xs:element ref="nm:if"     minOccurs="1" maxOccurs="1" />
      <xs:element ref="nm:elseif" minOccurs="0" maxOccurs="unbounded" />
      <xs:element ref="nm:else"   minOccurs="0" maxOccurs="1"         />
    </xs:sequence>
  </xs:group>


  <!-- Define Sql Node -->
  <xs:element name="key">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group   ref="nm:ifElse"   />
        <xs:element ref="nm:case"     />
        <xs:element ref="nm:foreach"  />
        <xs:element ref="nm:group"    />
        <xs:element ref="nm:ref"      />
      </xs:choice>
      <xs:attribute name="id" type="nm:notEmpty" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="if">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group   ref="nm:ifElse"   />
        <xs:element ref="nm:case"     />
        <xs:element ref="nm:foreach"  />
        <xs:element ref="nm:group"    />
        <xs:element ref="nm:ref"      />
      </xs:choice>
      <xs:attribute name="test" type="nm:notEmpty" use="required" />
    </xs:complexType>
  </xs:element>

  <xs:element name="elseif">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group   ref="nm:ifElse"   />
        <xs:element ref="nm:case"     />
        <xs:element ref="nm:foreach"  />
        <xs:element ref="nm:group"    />
        <xs:element ref="nm:ref"      />
      </xs:choice>
      <xs:attribute name="test" type="nm:notEmpty" use="required" />
    </xs:complexType>
  </xs:element>

  <xs:element name="else">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group   ref="nm:ifElse"   />
        <xs:element ref="nm:case"     />
        <xs:element ref="nm:foreach"  />
        <xs:element ref="nm:group"    />
        <xs:element ref="nm:ref"      />
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="case">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="nm:when" minOccurs="1" maxOccurs="unbounded" />
        <xs:element ref="nm:else" minOccurs="0" maxOccurs="1" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="when">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group   ref="nm:ifElse"   />
        <xs:element ref="nm:case"     />
        <xs:element ref="nm:foreach"  />
        <xs:element ref="nm:group"    />
        <xs:element ref="nm:ref"      />
      </xs:choice>
      <xs:attribute name="test" type="nm:notEmpty" use="required" />
    </xs:complexType>
  </xs:element>

  <xs:element name="foreach">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group   ref="nm:ifElse"   />
        <xs:element ref="nm:case"     />
        <xs:element ref="nm:foreach"  />
        <xs:element ref="nm:group"    />
        <xs:element ref="nm:ref"      />
      </xs:choice>
      <xs:attribute name="key"       type="nm:notEmpty" use="required" />
      <xs:attribute name="open"      type="nm:notEmpty" />
      <xs:attribute name="close"     type="nm:notEmpty" />
      <xs:attribute name="concater"  type="nm:notEmpty" />
      <xs:attribute name="indexKey"  type="nm:notEmpty" />
    </xs:complexType>
  </xs:element>

  <xs:element name="group">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="nm:if" minOccurs="1" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="open"      type="nm:notEmpty" />
      <xs:attribute name="close"     type="nm:notEmpty" />
      <xs:attribute name="concater" type="nm:notEmpty" />
    </xs:complexType>
  </xs:element>

  <xs:element name="ref">
    <xs:complexType>
      <xs:attribute name="id" type="nm:notEmpty" use="required" />
    </xs:complexType>
  </xs:element>


  <!-- Validation -->
  <xs:simpleType name="notEmpty">
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>